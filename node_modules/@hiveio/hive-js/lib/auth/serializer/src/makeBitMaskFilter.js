'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _jsbi = require('jsbi');

var _jsbi2 = _interopRequireDefault(_jsbi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var makeBitMaskFilter = function makeBitMaskFilter(allowedOperations) {
  return allowedOperations.reduce(function (_ref, allowedOperation) {
    var _ref2 = _slicedToArray(_ref, 2),
        low = _ref2[0],
        high = _ref2[1];

    return allowedOperation < 64 ? [_jsbi2.default.bitwiseOr(low, _jsbi2.default.leftShift(_jsbi2.default.BigInt(1), _jsbi2.default.BigInt(allowedOperation))), high] : [low, _jsbi2.default.bitwiseOr(high, _jsbi2.default.leftShift(_jsbi2.default.BigInt(1), _jsbi2.default.BigInt(allowedOperation - 64)))];
  }, [_jsbi2.default.BigInt(0), _jsbi2.default.BigInt(0)]).map(function (value) {
    return _jsbi2.default.notEqual(value, _jsbi2.default.BigInt(0)) ? value.toString() : null;
  });
};

module.exports = makeBitMaskFilter;